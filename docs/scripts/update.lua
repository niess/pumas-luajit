-------------------------------------------------------------------------------
-- Utitility script for updating the documentation
-- Author: Valentin Niess
-- License: GNU LGPL-3.0
-------------------------------------------------------------------------------
local pumas = require('pumas')
local utils = require('pumas.physics.utils')


-------------------------------------------------------------------------------
-- Base url for materials data
-------------------------------------------------------------------------------
local url_materials = [[https://github.com/niess/pumas-materials/blob/master/]]


-------------------------------------------------------------------------------
-- Substitute text in a doc file
-------------------------------------------------------------------------------
local substitute
do
    local prefix = '<!-- GENERATED BY PUMAS. DO NOT EDIT BELOW -->\n'
    local suffix = '<!-- END OF GENERATION. YOU CAN EDIT BELOW -->'

    local pattern = prefix:gsub('([-.])', '%%%1') .. '(.-)' ..
        suffix:gsub('([-.])', '%%%1')

    function substitute (path, text)
        local file = io.open(path, 'r')
        local content = file:read('*a')
        file:close()

        content = content:gsub(pattern, prefix .. text .. suffix, 1)

        file = io.open(path, 'w')
        file:write(content)
        file:close()
    end
end


-------------------------------------------------------------------------------
-- Get references in a source file
-------------------------------------------------------------------------------
local function get_references (path)
    local file = io.open(path)
    local content = file:read('*a')
    file:close()

    local references = {}
    for ref, key in content:gmatch('-- Ref: ([^\r\n]+)[\r\n ]*([^ ]+)[ ]*=') do
        table.insert(references, {key, ref})
    end

    return references
end


-------------------------------------------------------------------------------
-- Get a tagged comment in a source file
-------------------------------------------------------------------------------
local function get_tag (path, tag)
    local file = io.open(path)
    local content = file:read('*a')
    file:close()

    local pattern = '-- '..tag..': ([^\r\n]+)'
    local values = {}
    for v in content:gmatch(pattern) do
        table.insert(values, v)
    end

    return values
end


-------------------------------------------------------------------------------
-- Update the elements documentation
-------------------------------------------------------------------------------
do
    -- Fetch the references and sort them
    local references = get_references('src/pumas/data/elements.lua')
    table.sort(references, function (a, b)
        a, b = pumas.elements[a[1]], pumas.elements[b[1]]
        if a.Z ~= b.Z then
            return a.Z < b.Z
        else
            return a.A < b.A
        end
    end)

    -- Generate the table
    local txt = {[[
| Symbol | Z {: align="center"} | A <br> (g/mol) {: align="center"} | I <br> (GeV) {: align="center"} | data |
|--|--:|--:|--:|:-:|]]}
    for _, v in ipairs(references) do
        local symbol, ref = v[1], v[2]
        local data = pumas.elements[symbol]
        local format
        if symbol == 'Rk' then
            format = '| [_%s_<sup>*</sup>](%s) | _%0.f_ | _%g_ | _%G_ | &nbsp; [mdf](%s) &nbsp; |'
        else
            format = '| [%s](%s) | %0.f | %g | %G | [mdf](%s) |'
        end
        local url = url_materials..'mdf/elements/'..symbol..'.xml'
        table.insert(txt, string.format(
            format, symbol, ref, data.Z, data.A, data.I, url))
    end
    table.insert(txt, '')
    txt = table.concat(txt, '\n')

    -- Substitute the elements table
    substitute('docs/docs/api/data/elements.md', txt)
end


-------------------------------------------------------------------------------
-- Update the materials documentation
-------------------------------------------------------------------------------
do
    -- Fetch references and categories
    local path = 'src/pumas/data/materials.lua'
    local references = get_references(path)
    local categories = get_tag(path, 'Category')

    local headers = {
        {'Biological materials', 'biologicals'},
        {'Chemical elements', 'elements'},
        {'Inorganic compounds', 'inorganics'},
        {'Inorganic scintillators', 'scintillators'},
        {'Mixtures', 'mixtures'},
        {'Organic compounds', 'organics'},
        {'Polymers', 'polymers'}}

    -- Generate the HTML tables
    local txt = {}
    for _, header in ipairs(headers) do
        table.insert(txt, string.format([[
#### %s

| Name | density <br> (kg/m<sup>3</sup>) {: align="center"} | Z / A {: align="center"} | I <br> (GeV) {: align="center"} | data |
|--|--:|--:|--:|:-:|]], header[1]))
        for i, v in ipairs(references) do
            if categories[i] == header[2] then
                local name, ref = v[1], v[2]
                local data = pumas.materials[name]
                local snake = utils.snakify(name)
                local xml = url_materials..'mdf/materials/'..name..'.xml'
                local muon = url_materials..'dedx/muon/'..snake..'.txt'
                local tau = url_materials..'dedx/tau/'..snake..'.txt'

                table.insert(txt, string.format(
                    '| [%s](%s) | %G | %G | %G | &nbsp; [mdf](%s), [muon](%s), [tau](%s). &nbsp; |',
                    name, ref, data.density, data.ZoA, data.I, xml, muon, tau))
            end
        end
        table.insert(txt, '')
    end
    txt = table.concat(txt, '\n')

    -- Substitute the materials table
    substitute('docs/docs/api/data/materials.md', txt)
end
